<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅秋</title>
  <subtitle>让现在的自己活的轻松，就是让未来的自己活的悲惨。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangyi5628.github.io/"/>
  <updated>2016-07-18T10:05:48.000Z</updated>
  <id>http://zhangyi5628.github.io/</id>
  
  <author>
    <name>浅秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端开发中如何选用图片格式</title>
    <link href="http://zhangyi5628.github.io/2016/07/18/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A6%82%E4%BD%95%E9%80%89%E7%94%A8%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"/>
    <id>http://zhangyi5628.github.io/2016/07/18/前端开发中如何选用图片格式/</id>
    <published>2016-07-18T09:40:38.000Z</published>
    <updated>2016-07-18T10:05:48.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一-图像术语&quot;&gt;&lt;a href=&quot;#一-图像术语&quot; class=&quot;headerlink&quot; title=&quot;一.图像术语&quot;&gt;&lt;/a&gt;一.图像术语&lt;/h3&gt;&lt;h4 id=&quot;图形和照片&quot;&gt;&lt;a href=&quot;#图形和照片&quot; class=&quot;headerlink&quot; title=&quot;图形和照片&quot;&gt;&lt;/a&gt;图形和照片&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;图形&lt;ul&gt;
&lt;li&gt;网站的logo、草图、图表、大部分动画和图标都属于图形。这些图像通常由连续的线条或者其他尖锐的颜色过渡组成，颜色数量相对较少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;照片&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;照片通常有百万数量级的颜色，并且包含平滑的颜色过渡和渐变，想象一下用相机拍摄的日落时的照片。绘画作品的图像（比如蒙娜丽莎的微笑）更接近于照片，而不是图形就图像格式而言，GIF通常用来显示图形，而JPEG更适合显示照片。PNG两者都适合，甚至用调色板PNG（palette PNG）显示图形比GIF会更好一些&lt;h4 id=&quot;像素和RGB&quot;&gt;&lt;a href=&quot;#像素和RGB&quot; class=&quot;headerlink&quot; title=&quot;像素和RGB&quot;&gt;&lt;/a&gt;像素和RGB&lt;/h4&gt;图像由像素组成，像素是图像中最小的信息单元。我们可以使用不同的颜色模型来描述像素，在计算机图像处理上，RGB颜色模型是最常用的一种&lt;br&gt;在RGB颜色模型中，采用包含红（R）、绿（G）和蓝（B）的数量多少的方式来描述一个像素。R、G和B被称为成分（又称为通道），每种成分的强度值范围在0-255之间。我们经常在HTML和CSS中使用的是十六进制的成分值，范围从00~FF。将不同强度的成分组合在一起，就可以获得不同的颜色。比如：&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;红色是rgb(255, 0, 0)或十六进制的#FF0000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;蓝色是rgb(0, 0, 255)或十六进制的#0000FF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;灰色阴影很可能有着三个相同的成分值，比如，rgb(238, 238, 238)或十六进制的#EEEEEE&lt;/p&gt;
&lt;h4 id=&quot;真彩色图像和调色板图像格式&quot;&gt;&lt;a href=&quot;#真彩色图像和调色板图像格式&quot; class=&quot;headerlink&quot; title=&quot;真彩色图像和调色板图像格式&quot;&gt;&lt;/a&gt;真彩色图像和调色板图像格式&lt;/h4&gt;&lt;p&gt;使用RGB颜色模型到底可以展现多少种不同的颜色呢？答案是1600万种：256&lt;em&gt;256&lt;/em&gt;256（或者2的24次方）可以得到16777216种组合。可以支持这么颜色的图像格式叫做真彩色图像格式，比如JPEG和真彩色类型的PNG  &lt;/p&gt;
&lt;p&gt;为了在存储图像信息时节省一些空间，有一项技术是将图像中各种不同的颜色提取出来建立一个表，这个表通常叫做调色板（也可以称为索引）。有了这个颜色表，就可以通过将调色板中的条目和每个像素重新匹配，达到重新绘制整个图像的目的  &lt;/p&gt;
&lt;p&gt;调色板可以包含任意RGB颜色值，但是最经常使用的调色板图像格式——GIF和PNG8都会限制调色板中最多只能包含256种颜色。这不是说你只可以中256种已经定义号的颜色中选择，恰恰相反，你可以从1600+万的颜色中选择你需要的值，但是单个图像中最多只能包含256种颜色&lt;/p&gt;
&lt;h4 id=&quot;透明和alpha通道（RGBA）&quot;&gt;&lt;a href=&quot;#透明和alpha通道（RGBA）&quot; class=&quot;headerlink&quot; title=&quot;透明和alpha通道（RGBA）&quot;&gt;&lt;/a&gt;透明和alpha通道（RGBA）&lt;/h4&gt;&lt;p&gt;RGBA并非另一种截然不同的颜色模型，而是在RGB基础上做了扩展，额外的成分A代表alpha透明，值的范围也是从0~255，但实际上不同的程序和库会将透明定义为从0%~100%的百分比，或者从0-127的值。alpha通道描述了投过图像像素可以看到下面内容的程度&lt;/p&gt;
&lt;p&gt;假设已经做出了一个网页，设置了背景，并在上面放置了一个蓝色的图像。如果图像上某个像素的透明度设置为0，那么该像素下面的背景就不可见。如果alpha透明度设置为最大值100%，那么图像上的像素将会隐藏，而背景则会“浮现出来”。加入设置为中间值，比如50%，就可以同时看到背景和图像上的像素&lt;/p&gt;
&lt;h4 id=&quot;隔行扫描&quot;&gt;&lt;a href=&quot;#隔行扫描&quot; class=&quot;headerlink&quot; title=&quot;隔行扫描&quot;&gt;&lt;/a&gt;隔行扫描&lt;/h4&gt;&lt;p&gt;当网速很慢时，大图像会随着下载的进度逐行显示，从上到下每显示一行，缓慢地向下递进，为了提高用户体验，部分图像格式支持对那些连续采样的图像进行隔行扫描。隔行扫描可以让用户在完整下载图像之前，看到图像的一个粗略版本，从心理上消除页面被延迟加载的感觉&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二-不同图像格式的特性&quot;&gt;&lt;a href=&quot;#二-不同图像格式的特性&quot; class=&quot;headerlink&quot; title=&quot;二.不同图像格式的特性&quot;&gt;&lt;/a&gt;二.不同图像格式的特性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;GIF、JPEG和PNG这3种格式的区别：
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;GIF&quot;&gt;&lt;a href=&quot;#GIF&quot; class=&quot;headerlink&quot; title=&quot;GIF&quot;&gt;&lt;/a&gt;GIF&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;图形交换格式（Graphics Interchange Format）的缩写，是一种调色板图像格式，有以下特性：

- 透明

GIF允许一个二进制（是/否）类型的透明度，每个像素要么是完全透明的（不包含颜色），要么是完全不透明的（包含一个单色）。这就意味着它不支持alpha（可变的）透明，取而代之的是，调色板中的某个颜色可以被标记为表示透明，而透明像素则会被分配为这个颜色值。所以，如果你为GIF设置了透明像素，那么就会“消耗”一个调色板条目

- 动画
GIF格式支持动画，包含动画的图像由若干帧组成，就像几个图像同时包含在一个文件中一样，大家普遍认为GIF动画很烦人，这是因为在网络发展初期它被滥用了，那时候大家用GIF来制作闪烁文字、旋转的@标志等等。GIF动画现在是有一些应用，比如广告条（虽然现在这已经主要是Flash的天下了），还有在富互联网（RIAs）应用中出现的“加载中”指示符

- 无损

GIF是无损的，也就是说你可以打开任意一个GIF文件，做一些修改，保存关闭时不会损失任何质量

- 逐行扫描

当生成GIF文件时，会使用一个压缩算法（叫做LZW）来减小文件的大小。当压缩GIF时，会从上到下一行一行的对像素进行扫描，这种情况下，当图像在水平方向有很多重复颜色时，可以获得更好的压缩效果。比如，有一个500*10像素的图像（宽500px高10px），图像上包含一些条纹，就是说水平方向是由相同颜色线条组成的，将这个图像旋转90度后（宽10px高500px），其垂直方向是由相同颜色的条纹组成的，此时后者的文件要大于前者

- 隔行扫描

GIF支持可选的隔行扫描
由于GIF有256色的限制，所以不适合用来显示照片，照片所需的颜色数量远大于这个数量级。GIF更适合用来显示图形（图标、logo和图表），但PNG8是用来显示图形的最佳格式，所以，只有在需要动画时才应该用GIF
GIF格式中使用的LZW无损数据压缩算法，在以前是受专利保护的，但是这个专利在2004年过了保护期，现在已经可以自由使用GIF了
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;JPEG&quot;&gt;&lt;a href=&quot;#JPEG&quot; class=&quot;headerlink&quot; title=&quot;JPEG&quot;&gt;&lt;/a&gt;JPEG&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;- 有损

JPEG是一种有损的格式，用户可以设置自定义质量级别，这个级别决定了有多少图像信息会被丢弃。质量级别的值从0到100，但是就算设置为100，也同样会有一定程度的质量损耗

当要对某个图像进行多项编辑操作时，最好使用无损图像格式来保存中间结果，然后在完成所有的修改后另存为JPEG格式，否则将会在每次保存时都损耗一些质量

但也有少数操作时无损的，比如：
    + 旋转（只有在旋转90度、180度和270的情况下）

    + 裁剪

    + 翻转（水平或者垂直）

    + 从标准模式切换到渐进模式，反之亦然

    + 编辑图像的元数据
- 透明和动画

JPEG不支持透明或动画

- 隔行扫描

除了默认的标准JPEG（Baseline JPEG），还有一种渐进JPEG（Progressive JPEG），支持隔行扫描。Internet Explorer不会逐步地渲染渐进JPEF图像，而是在图像完全下载时立即全部显示出来

JPEG是web上用来存储照片的最佳格式，也被广泛应用在数码相机中，然而，这种格式不适合用来存储图形，因为有损的压缩方法将线条和清晰的颜色过渡都变成了“大色块”
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-图像术语&quot;&gt;&lt;a href=&quot;#一-图像术语&quot; class=&quot;headerlink&quot; title=&quot;一.图像术语&quot;&gt;&lt;/a&gt;一.图像术语&lt;/h3&gt;&lt;h4 id=&quot;图形和照片&quot;&gt;&lt;a href=&quot;#图形和照片&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="图片格式" scheme="http://zhangyi5628.github.io/tags/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"/>
    
      <category term="CSS" scheme="http://zhangyi5628.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>input type=file accept中可以限制可选的文件类型</title>
    <link href="http://zhangyi5628.github.io/2016/06/07/input-type-file-accept%E4%B8%AD%E5%8F%AF%E4%BB%A5%E9%99%90%E5%88%B6%E5%8F%AF%E9%80%89%E7%9A%84%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <id>http://zhangyi5628.github.io/2016/06/07/input-type-file-accept中可以限制可选的文件类型/</id>
    <published>2016-06-07T08:35:55.000Z</published>
    <updated>2016-06-07T09:08:28.000Z</updated>
    
    <content type="html">&lt;p&gt;在上传文件的时候，通过accept属性可以限制可选文件的类型，当设置改属性是，可以让用户在浏览上传文件时，只能选择指定的文件类型。那么不同的文件类型，accept值应该如何设置了？&lt;br&gt;见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件类型&lt;/th&gt;
&lt;th&gt;MIME(accept属性值)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;图片（.png,.jpg等所有格式的图片）&lt;/td&gt;
&lt;td&gt;image/*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.doc&lt;/td&gt;
&lt;td&gt;application/msword&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.docx&lt;/td&gt;
&lt;td&gt;application/vnd.openxmlformats-officedocument.wordprocessingml.document&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.xls&lt;/td&gt;
&lt;td&gt;application/vnd.ms-excel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.xlsx&lt;/td&gt;
&lt;td&gt;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.txt&lt;/td&gt;
&lt;td&gt;text/plain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.html&lt;/td&gt;
&lt;td&gt;text/html&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Video(.avi, .mpg, .mpeg, .mp4)&lt;/td&gt;
&lt;td&gt;video/*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio(.mp3, .wav, etc)&lt;/td&gt;
&lt;td&gt;audio/*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.pdf&lt;/td&gt;
&lt;td&gt;application/pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.csv&lt;/td&gt;
&lt;td&gt;text/csv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.css&lt;/td&gt;
&lt;td&gt;text/css&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*.gif&lt;/td&gt;
&lt;td&gt;image/gif&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在上传文件的时候，通过accept属性可以限制可选文件的类型，当设置改属性是，可以让用户在浏览上传文件时，只能选择指定的文件类型。那么不同的文件类型，accept值应该如何设置了？&lt;br&gt;见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件类型&lt;/th&gt;
    
    </summary>
    
      <category term="Html" scheme="http://zhangyi5628.github.io/categories/Html/"/>
    
    
      <category term="Html" scheme="http://zhangyi5628.github.io/tags/Html/"/>
    
      <category term="input" scheme="http://zhangyi5628.github.io/tags/input/"/>
    
      <category term="file" scheme="http://zhangyi5628.github.io/tags/file/"/>
    
      <category term="upload" scheme="http://zhangyi5628.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>webpack config配置简介</title>
    <link href="http://zhangyi5628.github.io/2016/05/21/webpack-config%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B/"/>
    <id>http://zhangyi5628.github.io/2016/05/21/webpack-config配置简介/</id>
    <published>2016-05-21T01:06:36.000Z</published>
    <updated>2016-05-21T02:16:27.000Z</updated>
    
    <content type="html">&lt;p&gt;本文只对webpack的一些简单配置（webpack.config.js）做介绍，并不深究。&lt;/p&gt;
&lt;h3 id=&quot;webpack是什么&quot;&gt;&lt;a href=&quot;#webpack是什么&quot; class=&quot;headerlink&quot; title=&quot;webpack是什么&quot;&gt;&lt;/a&gt;webpack是什么&lt;/h3&gt;&lt;p&gt;webpack 简单说就是模块加载器。在webpack中，所有的资源文件如js,css,图片等都看作是模块。&lt;br&gt;webpack 支持AMD,CommonJs以及ES6语法的模块加载系统。&lt;/p&gt;
&lt;h3 id=&quot;webpack安装&quot;&gt;&lt;a href=&quot;#webpack安装&quot; class=&quot;headerlink&quot; title=&quot;webpack安装&quot;&gt;&lt;/a&gt;webpack安装&lt;/h3&gt;&lt;p&gt;首先你要安装node.js和npm&lt;br&gt;其次为你的项目新建一个文件夹，然后输入 npm init，然后填写相关问题。&lt;br&gt;这样会为你创建了 package.json。&lt;br&gt;接下来把webpack 安装在本地&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i webpack --save-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;项目目录&quot;&gt;&lt;a href=&quot;#项目目录&quot; class=&quot;headerlink&quot; title=&quot;项目目录&quot;&gt;&lt;/a&gt;项目目录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack-demo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-dist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |-app.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |-component.jsx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|-webpack.dist.config.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;webpack-config-js-开发环境配置文件&quot;&gt;&lt;a href=&quot;#webpack-config-js-开发环境配置文件&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.js 开发环境配置文件&quot;&gt;&lt;/a&gt;webpack.config.js 开发环境配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var path = require(&amp;quot;path&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var webpack = require(&amp;quot;webpack&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var node_modules = path.resolve(__dirname, &amp;apos;node_modules&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;    //入口文件配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        js: &amp;apos;./src/app.js&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vendor: [&amp;apos;react&amp;apos;, &amp;apos;react-dom&amp;apos;] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //引用的功能代码，这样配置可以把功能代码打包在一个文件中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: path.resolve(__dirname, &amp;apos;build&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &amp;apos;./bundle.js&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loaders: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            test: /\.jsx?$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            exclude: /node_modules/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &amp;apos;babel&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            query: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                presets: [&amp;apos;react&amp;apos;, &amp;apos;es2015&amp;apos;] //设置支持的ES6语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            test: /\.less$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &amp;apos;style!css!less&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            test: /\.(eot|woff|woff2|ttf|svg)$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &amp;apos;url-loader&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                // loader: &amp;apos;url-loader&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            test: /\.(png|jpg|gif)$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &amp;quot;url-loader?limit=250000&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        noParse: [&amp;apos;react&amp;apos;, &amp;apos;readct-dom&amp;apos;] //忽略掉这些目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        new webpack.HotModuleReplacementPlugin(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        new webpack.NoErrorsPlugin(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        new webpack.optimize.CommonsChunkPlugin(&amp;apos;vendor&amp;apos;, &amp;apos;vendor.bundle.js&amp;apos;) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //设置支持把公用代码打包到一个问题就中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;webpack-dist-config-js-生产环境配置文件&quot;&gt;&lt;a href=&quot;#webpack-dist-config-js-生产环境配置文件&quot; class=&quot;headerlink&quot; title=&quot;webpack.dist.config.js 生产环境配置文件&quot;&gt;&lt;/a&gt;webpack.dist.config.js 生产环境配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var webpack = require(&amp;apos;webpack&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var path    = require(&amp;apos;path&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var config  = require(&amp;apos;./webpack.config&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;config.output = &amp;#123;   //修改输出地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  filename: &amp;apos;./src/app.js&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  publicPath: &amp;apos;&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  path: path.resolve(__dirname, &amp;apos;dist&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;module.exports = config;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;打包命令&quot;&gt;&lt;a href=&quot;#打包命令&quot; class=&quot;headerlink&quot; title=&quot;打包命令&quot;&gt;&lt;/a&gt;打包命令&lt;/h3&gt;&lt;p&gt;把webpack的打包命令写在package.json中的script配置中，这样就不用每次输入很长的webpack命令。&lt;br&gt;配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;scripts&amp;quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;build&amp;quot;: &amp;quot;webpack --config webpack.config.js&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production webpack -p --config webpack.dist.config.js&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文只对webpack的一些简单配置（webpack.config.js）做介绍，并不深究。&lt;/p&gt;
&lt;h3 id=&quot;webpack是什么&quot;&gt;&lt;a href=&quot;#webpack是什么&quot; class=&quot;headerlink&quot; title=&quot;webpack是什么&quot;&gt;&lt;/a&gt;we
    
    </summary>
    
      <category term="前端构建工具" scheme="http://zhangyi5628.github.io/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://zhangyi5628.github.io/tags/webpack/"/>
    
      <category term="config" scheme="http://zhangyi5628.github.io/tags/config/"/>
    
      <category term="前端构建工具" scheme="http://zhangyi5628.github.io/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Mac 常用快捷键</title>
    <link href="http://zhangyi5628.github.io/2016/05/21/Mac-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://zhangyi5628.github.io/2016/05/21/Mac-常用快捷键/</id>
    <published>2016-05-21T00:18:23.000Z</published>
    <updated>2016-05-21T01:05:14.000Z</updated>
    
    <content type="html">&lt;p&gt;收集Max OS X系统常用快捷键&lt;/p&gt;
&lt;h3 id=&quot;一、OS-X系统常用快捷键&quot;&gt;&lt;a href=&quot;#一、OS-X系统常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;一、OS X系统常用快捷键&quot;&gt;&lt;/a&gt;一、OS X系统常用快捷键&lt;/h3&gt;&lt;p&gt;command+control+f: 进入或退出全屏模式&lt;br&gt;command+m: 最小化窗口&lt;/p&gt;
&lt;h3 id=&quot;二、iTerm&quot;&gt;&lt;a href=&quot;#二、iTerm&quot; class=&quot;headerlink&quot; title=&quot;二、iTerm&quot;&gt;&lt;/a&gt;二、iTerm&lt;/h3&gt;&lt;p&gt;iterm是我们程序员最熟悉的Mac软件之一了，现在的前端不运行命令行工具已经没法工作了，什么node,git,grunt,gulp,webpack…&lt;br&gt;command+enter: 进入或退出全屏模式&lt;br&gt;command+t: 新建标签&lt;br&gt;command+w: 关闭标签&lt;br&gt;command+f: 弹出查找模式&lt;br&gt;command+d: 垂直分隔（我必用，垂直开多个窗口）&lt;br&gt;command+shift+d: 水平分隔&lt;br&gt;command+(+): 放大文字&lt;br&gt;command+(-): 缩小文字&lt;br&gt;command+0: 缩放文字到正常比例&lt;br&gt;command+shift+h: 列出剪切板的历史记录&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;收集Max OS X系统常用快捷键&lt;/p&gt;
&lt;h3 id=&quot;一、OS-X系统常用快捷键&quot;&gt;&lt;a href=&quot;#一、OS-X系统常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;一、OS X系统常用快捷键&quot;&gt;&lt;/a&gt;一、OS X系统常用快捷键&lt;/h3&gt;&lt;p&gt;c
    
    </summary>
    
      <category term="Mac" scheme="http://zhangyi5628.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://zhangyi5628.github.io/tags/Mac/"/>
    
      <category term="快捷键" scheme="http://zhangyi5628.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求流程简介</title>
    <link href="http://zhangyi5628.github.io/2016/05/13/Http%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E7%AE%80%E4%BB%8B/"/>
    <id>http://zhangyi5628.github.io/2016/05/13/Http请求流程简介/</id>
    <published>2016-05-13T06:37:09.000Z</published>
    <updated>2016-05-13T07:58:47.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了“&lt;a href=&quot;http://www.linux178.com/web/httprequest.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一次完整的HTTP事务是怎样一个过程？&lt;/a&gt;”这篇博客深有感触，就想做个总结，把对于前端来说更重要的部分做个摘录。&lt;br&gt;HTTP属于TCP/IP模型中的应用层协议, TCP协议实现了数据流的传输。然而，人们更加习惯以文件为单位传输资源，比如文本文件，图像文件，超文本文档(hypertext document)。&lt;br&gt;超文本文档中包含有超链接，指向其他的资源。超文本文档是万维网(World Wide Web，即www)的基础。&lt;br&gt;HTTP协议解决文件传输的问题。HTTP是应用层协议，主要建立在TCP协议之上(偶尔也可以UDP为底层)。&lt;/p&gt;
&lt;h3 id=&quot;一次完整的HTTP请求的流程大体是这样：&quot;&gt;&lt;a href=&quot;#一次完整的HTTP请求的流程大体是这样：&quot; class=&quot;headerlink&quot; title=&quot;一次完整的HTTP请求的流程大体是这样：&quot;&gt;&lt;/a&gt;一次完整的HTTP请求的流程大体是这样：&lt;/h3&gt;&lt;p&gt;域名解析 —&amp;gt; 发起TCP的3次握手 —&amp;gt; 建立TCP连接后发起HTTP请求 —&amp;gt; 服务器响应HTTP请求 —&amp;gt;浏览器接收到Html代码 —&amp;gt; 浏览器解析Html代码，并请求html代码中的资源（js、css、image等）—&amp;gt;浏览器对页面进行渲染呈现给用户&lt;/p&gt;
&lt;h3 id=&quot;HTTP请求类型&quot;&gt;&lt;a href=&quot;#HTTP请求类型&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求类型&quot;&gt;&lt;/a&gt;HTTP请求类型&lt;/h3&gt;&lt;h4 id=&quot;1、GET：获取一个文档&quot;&gt;&lt;a href=&quot;#1、GET：获取一个文档&quot; class=&quot;headerlink&quot; title=&quot;1、GET：获取一个文档&quot;&gt;&lt;/a&gt;1、GET：获取一个文档&lt;/h4&gt;&lt;p&gt;大部分被传输到浏览器的html,js,css,image等资源都是通过GET方式发送出去的，它是获取资源的主要方法。&lt;/p&gt;
&lt;h4 id=&quot;2、POST：发送数据至服务器&quot;&gt;&lt;a href=&quot;#2、POST：发送数据至服务器&quot; class=&quot;headerlink&quot; title=&quot;2、POST：发送数据至服务器&quot;&gt;&lt;/a&gt;2、POST：发送数据至服务器&lt;/h4&gt;&lt;p&gt;受url长度、安全型等限制大多数获取数据的请求都不使用GET方法，而是使用POST。使用POST可以发送更多的数据，也更安全，URL不再被改写。POST发送的数据位于http请求的主体中。一般使用POST来提交表单。&lt;/p&gt;
&lt;h4 id=&quot;3、HEAD：接收头部信息&quot;&gt;&lt;a href=&quot;#3、HEAD：接收头部信息&quot; class=&quot;headerlink&quot; title=&quot;3、HEAD：接收头部信息&quot;&gt;&lt;/a&gt;3、HEAD：接收头部信息&lt;/h4&gt;&lt;p&gt;HEAD和GET很相似，只不过HEAD不接受HTTP响应的内容部分。当你发送了一个HEAD请求，那就意味着你只对HTTP头部感兴趣，而不是文档本身。&lt;br&gt;这个方法可以让浏览器判断页面是否被修改过，从而控制缓存。也可判断所请求的文档是否存在。&lt;br&gt;例如，假如你的网站上有很多链接，那么你就可以简单的给他们分别发送HEAD请求来判断是否存在死链，这比使用GET要快很多。&lt;/p&gt;
&lt;h4 id=&quot;4、PUT：-webdav-上传&quot;&gt;&lt;a href=&quot;#4、PUT：-webdav-上传&quot; class=&quot;headerlink&quot; title=&quot;4、PUT：(webdav) 上传&quot;&gt;&lt;/a&gt;4、PUT：(webdav) 上传&lt;/h4&gt;&lt;h4 id=&quot;5、DELETE：-webdav-删除&quot;&gt;&lt;a href=&quot;#5、DELETE：-webdav-删除&quot; class=&quot;headerlink&quot; title=&quot;5、DELETE：(webdav) 删除&quot;&gt;&lt;/a&gt;5、DELETE：(webdav) 删除&lt;/h4&gt;&lt;h4 id=&quot;6、OPTIONS：返回请求的资源所支持的方法的方法&quot;&gt;&lt;a href=&quot;#6、OPTIONS：返回请求的资源所支持的方法的方法&quot; class=&quot;headerlink&quot; title=&quot;6、OPTIONS：返回请求的资源所支持的方法的方法&quot;&gt;&lt;/a&gt;6、OPTIONS：返回请求的资源所支持的方法的方法&lt;/h4&gt;&lt;h4 id=&quot;7、TRACE-追求一个资源请求中间所经过的代理&quot;&gt;&lt;a href=&quot;#7、TRACE-追求一个资源请求中间所经过的代理&quot; class=&quot;headerlink&quot; title=&quot;7、TRACE: 追求一个资源请求中间所经过的代理&quot;&gt;&lt;/a&gt;7、TRACE: 追求一个资源请求中间所经过的代理&lt;/h4&gt;&lt;h3 id=&quot;请求的协议&quot;&gt;&lt;a href=&quot;#请求的协议&quot; class=&quot;headerlink&quot; title=&quot;请求的协议&quot;&gt;&lt;/a&gt;请求的协议&lt;/h3&gt;&lt;p&gt;http/0.9: stateless&lt;br&gt;http/1.0: MIME, keep-alive (保持连接), 缓存&lt;br&gt;http/1.1: 更多的请求方法，更精细的缓存控制，持久连接(persistent connection) 比较常用&lt;/p&gt;
&lt;h3 id=&quot;HTTP请求报文头部信息&quot;&gt;&lt;a href=&quot;#HTTP请求报文头部信息&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求报文头部信息&quot;&gt;&lt;/a&gt;HTTP请求报文头部信息&lt;/h3&gt;&lt;p&gt;Accept  就是告诉服务器端，我接受那些MIME类型&lt;br&gt;Accept-Encoding  这个看起来是接受那些压缩方式的文件&lt;br&gt;Accept-Lanague   告诉服务器能够发送哪些语言&lt;br&gt;Connection       告诉服务器支持keep-alive特性&lt;br&gt;Cookie           每次请求时都会携带上Cookie以方便服务器端识别是否是同一个客户端&lt;br&gt;Host             用来标识请求服务器上的那个虚拟主机，比如Nginx里面可以定义很多个虚拟主机&lt;br&gt;                 那这里就是用来标识要访问那个虚拟主机。&lt;br&gt;User-Agent       用户代理，一般情况是浏览器，也有其他类型，如：wget curl 搜索引擎的蜘蛛等&lt;br&gt;条件请求首部&lt;br&gt;If-Modified-Since 是浏览器向服务器端询问某个资源文件如果自从什么时间修改过，那么重新发给我，这样就保证服务器端资源文件更新时，浏览器再次去请求，而不是使用缓存中的文件&lt;br&gt;安全请求首部：&lt;br&gt;Authorization    客户端提供给服务器的认证信息；&lt;br&gt;MIME 遵循以下格式：major/minor 主类型/次类型 例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;image/jpg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;image/gif&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;text/html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;video/quicktime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;appliation/x-httpd-php&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;HTTP响应头部信息&quot;&gt;&lt;a href=&quot;#HTTP响应头部信息&quot; class=&quot;headerlink&quot; title=&quot;HTTP响应头部信息&quot;&gt;&lt;/a&gt;HTTP响应头部信息&lt;/h3&gt;&lt;p&gt;Connection            使用keep-alive特性&lt;br&gt;Content-Encoding      使用gzip方式对资源压缩&lt;br&gt;Content-type          MIME类型为html类型，字符集是 UTF-8&lt;br&gt;Date                  响应的日期&lt;br&gt;Server                使用的WEB服务器&lt;br&gt;Transfer-Encoding:chunked   分块传输编码 是http中的一种数据传输机制，允许HTTP由网页服务器发送给客户端应用（通常是网页浏览器）的数据可以分成多个部分，分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供&lt;br&gt;Vary  这个可以参考（&lt;a href=&quot;http://blog.csdn.net/tenfyguo/article/details/5939000）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/tenfyguo/article/details/5939000）&lt;/a&gt;&lt;br&gt;X-Pingback  参考（&lt;a href=&quot;http://blog.sina.com.cn/s/blog_bb80041c0101fmfz.html）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_bb80041c0101fmfz.html）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;HTTP响应状态码&quot;&gt;&lt;a href=&quot;#HTTP响应状态码&quot; class=&quot;headerlink&quot; title=&quot;HTTP响应状态码&quot;&gt;&lt;/a&gt;HTTP响应状态码&lt;/h3&gt;&lt;p&gt;1xx: 信息性状态码&lt;br&gt;&amp;emsp;&amp;emsp;100, 101&lt;br&gt;2xx: 成功状态码&lt;br&gt;&amp;emsp;&amp;emsp;200：OK&lt;br&gt;3xx: 重定向状态码&lt;br&gt;&amp;emsp;&amp;emsp;301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向;&lt;br&gt;&amp;emsp;&amp;emsp;302: 临时重定向，显式重定向, Location响应首部的值为新的URL&lt;br&gt;&amp;emsp;&amp;emsp;304：Not Modified  未修改，比如本地缓存的资源文件和服务器上比较时，发现并没有修改，服务器返回一个304状态码，告诉浏览器，你不用请求该资源，直接使用本地的资源即可。&lt;br&gt;4xx: 客户端错误状态码&lt;br&gt;&amp;emsp;&amp;emsp;404: Not Found  请求的URL资源并不存在&lt;br&gt;5xx: 服务器端错误状态码&lt;br&gt;&amp;emsp;&amp;emsp;500: Internal Server Error  服务器内部错误&lt;br&gt;&amp;emsp;&amp;emsp;502: Bad Gateway  前面代理服务器联系不到后端的服务器时出现&lt;br&gt;&amp;emsp;&amp;emsp;504：Gateway Timeout  这个是代理能联系到后端的服务器，但是后端的服务器在规定的时间内没有给代理服务器响应&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了“&lt;a href=&quot;http://www.linux178.com/web/httprequest.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一次完整的HTTP事务是怎样一个过程？&lt;/a&gt;”这篇博客深有感触，就想做个总结，把对于前端来
    
    </summary>
    
      <category term="Web" scheme="http://zhangyi5628.github.io/categories/Web/"/>
    
    
      <category term="HTTP" scheme="http://zhangyi5628.github.io/tags/HTTP/"/>
    
      <category term="TCP" scheme="http://zhangyi5628.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>非常棒的技术博客分享</title>
    <link href="http://zhangyi5628.github.io/2016/05/13/%E9%9D%9E%E5%B8%B8%E6%A3%92%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E5%88%86%E4%BA%AB/"/>
    <id>http://zhangyi5628.github.io/2016/05/13/非常棒的技术博客分享/</id>
    <published>2016-05-13T05:40:44.000Z</published>
    <updated>2016-05-13T05:47:00.000Z</updated>
    
    <content type="html">&lt;p&gt;分享、记录一些我所看过很棒的技术博客  &lt;/p&gt;
&lt;h3 id=&quot;1-一次完整的HTTP事务是怎样一个过程？&quot;&gt;&lt;a href=&quot;#1-一次完整的HTTP事务是怎样一个过程？&quot; class=&quot;headerlink&quot; title=&quot;1.一次完整的HTTP事务是怎样一个过程？&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;http://www.linux178.com/web/httprequest.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一次完整的HTTP事务是怎样一个过程？&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;分享、记录一些我所看过很棒的技术博客  &lt;/p&gt;
&lt;h3 id=&quot;1-一次完整的HTTP事务是怎样一个过程？&quot;&gt;&lt;a href=&quot;#1-一次完整的HTTP事务是怎样一个过程？&quot; class=&quot;headerlink&quot; title=&quot;1.一次完整的HTTP事务是怎样一个过程？&quot;
    
    </summary>
    
      <category term="分享转载" scheme="http://zhangyi5628.github.io/categories/%E5%88%86%E4%BA%AB%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="分享" scheme="http://zhangyi5628.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="转载" scheme="http://zhangyi5628.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Array的方法详解一</title>
    <link href="http://zhangyi5628.github.io/2016/05/08/Array%E7%9A%84%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%80/"/>
    <id>http://zhangyi5628.github.io/2016/05/08/Array的方法详解一/</id>
    <published>2016-05-08T08:20:25.000Z</published>
    <updated>2016-05-13T03:11:02.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;闲来无事，把js中数组的方法给整理下，发现自己很多方法不常用，容易忘记这些方法具体是做什么的。另外也给自己的博客充实点内容。&lt;br&gt;js中的Array比较奇怪，和java等其他语言相比，js中的数组每一项可以保存任何类型的数据，而且数组的发现是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。数组的length属性也很特别，它不是只读的，因此通过设置length属性，可以做到向数组的末尾移除或添加新元素。&lt;br&gt;js中所有的对象都具有toLocaleString()、toString()、valueOf()三个方法，数组也不例外。&lt;/p&gt;
&lt;h3 id=&quot;二、索引&quot;&gt;&lt;a href=&quot;#二、索引&quot; class=&quot;headerlink&quot; title=&quot;二、索引&quot;&gt;&lt;/a&gt;二、索引&lt;/h3&gt;&lt;p&gt;1.&lt;a href=&quot;#push&quot;&gt;push&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;#pop&quot;&gt;pop&lt;/a&gt;&lt;br&gt;3.&lt;a href=&quot;#shift&quot;&gt;shift&lt;/a&gt;&lt;br&gt;4.&lt;a href=&quot;#unshift&quot;&gt;unshift&lt;/a&gt;&lt;br&gt;5.&lt;a href=&quot;#reverse&quot;&gt;reverse&lt;/a&gt;&lt;br&gt;6.&lt;a href=&quot;#sort&quot;&gt;sort&lt;/a&gt;&lt;br&gt;7.&lt;a href=&quot;#concat&quot;&gt;concat&lt;/a&gt;&lt;br&gt;8.&lt;a href=&quot;#slice&quot;&gt;slice&lt;/a&gt;&lt;br&gt;9.&lt;a href=&quot;#splice&quot;&gt;splice&lt;/a&gt;&lt;br&gt;10.&lt;a href=&quot;#join&quot;&gt;join&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;三、详解&quot;&gt;&lt;a href=&quot;#三、详解&quot; class=&quot;headerlink&quot; title=&quot;三、详解&quot;&gt;&lt;/a&gt;三、详解&lt;/h3&gt;&lt;h4 id=&quot;1-Array-push&quot;&gt;&lt;a href=&quot;#1-Array-push&quot; class=&quot;headerlink&quot; title=&quot;1.Array.push()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;push&quot;&gt;1.Array.push()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;js中数组有push()和pop()方法，可以用这两个方法实现类似于栈的行为，即最新添加的最早被移除。栈是一种（Last-In-First-out)后进先出的数据结构。&lt;br&gt;push()方法可以接收任意数量的参数，把它们逐个添加到数组的末尾，并返回添加后的数组长度。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    count = arr.push(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(count); &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[1,2]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-Array-pop&quot;&gt;&lt;a href=&quot;#2-Array-pop&quot; class=&quot;headerlink&quot; title=&quot;2.Array.pop()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;pop&quot;&gt;2.Array.pop()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;pop()方法则从数组的末尾移除最后一项元素，减少数组的length值，并返回移除的元素。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    item = arr.pop();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item);          &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr.length);    &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);           &lt;span class=&quot;comment&quot;&gt;//[1,2]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-Array-shift&quot;&gt;&lt;a href=&quot;#3-Array-shift&quot; class=&quot;headerlink&quot; title=&quot;3.Array.shift()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;shift&quot;&gt;3.Array.shift()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;shift方法可以移除数组中得第一个元素并返回该元素，结合使用shift()和push()就可以想使用队列一样使用数组。栈数据结构的访问规则是后进先出，而队列数据结构的访问规则是先进先出。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    item = arr.shift();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item);          &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr.length);    &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);           &lt;span class=&quot;comment&quot;&gt;//[2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-Array-unshift&quot;&gt;&lt;a href=&quot;#4-Array-unshift&quot; class=&quot;headerlink&quot; title=&quot;4.Array.unshift()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;unshift&quot;&gt;4.Array.unshift()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;unshift()方法和shift()的用途正好相反，它能在数组的前端添加任意个元素并返回新数组的长度。和push()方法用法类似，不同点是push是向数组的末尾添加元素。同时使用unshift()和pop()方法，就可以从相反的方向模拟队列，即在数组的前端添加元素，从数组的末尾移除元素。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    count = arr.unshift(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr.length);    &lt;span class=&quot;comment&quot;&gt;//5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);           &lt;span class=&quot;comment&quot;&gt;//[-1,0,1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-Array-reverse&quot;&gt;&lt;a href=&quot;#5-Array-reverse&quot; class=&quot;headerlink&quot; title=&quot;5.Array.reverse()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;reverse&quot;&gt;5.Array.reverse()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;数组中又两个可以直接用来重排序的方法：reverse()和sort()。reverse()方法为反转数组元素的顺序。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;arr.reverse();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[3, 2, 1]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;6-Array-sort&quot;&gt;&lt;a href=&quot;#6-Array-sort&quot; class=&quot;headerlink&quot; title=&quot;6.Array.sort()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;sort&quot;&gt;6.Array.sort()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;默认情况下，sort()方法调用每个数组元素的toString()方法来转型，然后比较得到的字符串，按升序排列数组元素。即使数组的每一项都是number类型，sort()方法比较的也是字符串。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;arr.sort();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[0,1,10,15,5]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;sort()方法可以接收一个函数作为参数，函数接收相邻的两个数组元素作为参数。如果第一个参数应该位于第二个参数之前就返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个参数之后在返回一个正数。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;arr.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;val1, val2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(val1 &amp;lt; val2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(val1 &amp;gt; val2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[15, 10, 5, 1, 0] 倒序&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;7-Array-concat&quot;&gt;&lt;a href=&quot;#7-Array-concat&quot; class=&quot;headerlink&quot; title=&quot;7.Array.concat()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;concat&quot;&gt;7.Array.concat()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;concat()方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。如果没有传参数，就会只返回当前数组的副本。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr2 = arr.concat(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[1,2]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr2);  &lt;span class=&quot;comment&quot;&gt;//[1,2,3,4,5]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;8-Array-slice&quot;&gt;&lt;a href=&quot;#8-Array-slice&quot; class=&quot;headerlink&quot; title=&quot;8.Array.slice()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;slice&quot;&gt;8.Array.slice()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;slice()方法可以基于当前数组中的一个或多个元素创建一个新数组。slice()方法可以接受一或两个参数，即要返回元素的起始和结束位置。当只有一个参数时，slice()方法会返回从该参数指定的位置开始到当前数组末尾所有元素。如果是两个参数，则返回起始和结束位置之前的元素，但不包括结束位置的元素。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr2 = arr.slice(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr3 = arr.slice(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[1, 2, 3, 4, 5]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr2);  &lt;span class=&quot;comment&quot;&gt;//[4, 5]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr3);  &lt;span class=&quot;comment&quot;&gt;//[4]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。对于长度是5的数组，slice(-2,-1)与slice(3,4)得到的结果相同。如果结束位置小于起始位置，则返回空数组。&lt;/p&gt;
&lt;h4 id=&quot;9-Array-splice&quot;&gt;&lt;a href=&quot;#9-Array-splice&quot; class=&quot;headerlink&quot; title=&quot;9.Array.splice()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;splice&quot;&gt;9.Array.splice()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;splice()方法很强大，它有很多种用法，splice()方法主要用来向数组中部插入元素，使用这个方法的方式有3种。&lt;br&gt;删除：可以删除任意数量的元素，只需指定2个参数：要删除的第一个元素的位置和要删除的元素数量。例如splice(0,2)会删除数组中的前两项。&lt;br&gt;插入：可以向指定位置插入任意数量的元素，需提供3个参数：起始位置，0（要删除的元素数量）和要插入的元素。&lt;br&gt;替换：可以向指定位置插入任意数量的元素，且同事删除任意数量的元素，需要指定3个参数：起始位置，要删除的元素数量和要插入的任意数量的元素。插入的项数不必与删除的项数相等。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr1 = arr.splice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[3, 4, 5]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr1);  &lt;span class=&quot;comment&quot;&gt;//[1, 2]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//插入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr1 = arr.splice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[1, -1, 0, 2, 3, 4, 5]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//替换&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr1 = arr.splice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr);   &lt;span class=&quot;comment&quot;&gt;//[0, 0, 3, 4, 5]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最容易忘记的就是splice()方法，反正我是经常忘记该怎么用这个方法。&lt;/p&gt;
&lt;h4 id=&quot;10-Array-join&quot;&gt;&lt;a href=&quot;#10-Array-join&quot; class=&quot;headerlink&quot; title=&quot;10.Array.join()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;join&quot;&gt;10.Array.join()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;join()方法只接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr.join(&lt;span class=&quot;string&quot;&gt;&#39;|&#39;&lt;/span&gt;));     &lt;span class=&quot;comment&quot;&gt;//1|2|3&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;闲来无事，把js中数组的方法给整理下，发现自己很多方法不常用，容易忘记这些方法具体是做什么的。另外也给自己的博客充实点内容。
    
    </summary>
    
      <category term="javascript" scheme="http://zhangyi5628.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://zhangyi5628.github.io/tags/javascript/"/>
    
      <category term="数组" scheme="http://zhangyi5628.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>javascript-Array的方法详解二（ES5中的Array方法）</title>
    <link href="http://zhangyi5628.github.io/2016/04/22/javascript-Array%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BA%8C%EF%BC%88ES5%E4%B8%AD%E7%9A%84Array%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>http://zhangyi5628.github.io/2016/04/22/javascript-Array方法详解二（ES5中的Array方法）/</id>
    <published>2016-04-22T10:43:17.000Z</published>
    <updated>2016-05-08T10:28:14.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;ES5中新增了许多Array的方法，巧用这些方法能够很好的提示代码质量和性能，自己之前也经常忘记这些方法的用法，所以写一写巩固一下。&lt;/p&gt;
&lt;h3 id=&quot;二、索引&quot;&gt;&lt;a href=&quot;#二、索引&quot; class=&quot;headerlink&quot; title=&quot;二、索引&quot;&gt;&lt;/a&gt;二、索引&lt;/h3&gt;&lt;p&gt;ES5中新增的数组方法如下：&lt;br&gt;1.&lt;a href=&quot;#isArray&quot;&gt;isArray&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;#indexOf&quot;&gt;indexOf&lt;/a&gt;&lt;br&gt;3.&lt;a href=&quot;#lastIndexOf&quot;&gt;lastIndexOf&lt;/a&gt;&lt;br&gt;4.&lt;a href=&quot;#every&quot;&gt;every&lt;/a&gt;&lt;br&gt;5.&lt;a href=&quot;#some&quot;&gt;some&lt;/a&gt;&lt;br&gt;6.&lt;a href=&quot;#forEach&quot;&gt;forEach&lt;/a&gt;&lt;br&gt;7.&lt;a href=&quot;#map&quot;&gt;map&lt;/a&gt;&lt;br&gt;8.&lt;a href=&quot;#filter&quot;&gt;filter&lt;/a&gt;&lt;br&gt;9.&lt;a href=&quot;#reduce&quot;&gt;reduce&lt;/a&gt;&lt;br&gt;10.&lt;a href=&quot;#reduceRight&quot;&gt;reduceRight&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;三、详解&quot;&gt;&lt;a href=&quot;#三、详解&quot; class=&quot;headerlink&quot; title=&quot;三、详解&quot;&gt;&lt;/a&gt;三、详解&lt;/h3&gt;&lt;h4 id=&quot;1-Array-isArray&quot;&gt;&lt;a href=&quot;#1-Array-isArray&quot; class=&quot;headerlink&quot; title=&quot;1.Array.isArray()&quot;&gt;&lt;/a&gt;&lt;span id=&quot;isArray&quot;&gt;1.Array.isArray()&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;判断一个元素是否为数组，不多解释。&lt;br&gt;低版本浏览器可以如下扩展：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(arg) === &lt;span class=&quot;string&quot;&gt;&#39;[object Array]&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-indexOf&quot;&gt;&lt;a href=&quot;#2-indexOf&quot; class=&quot;headerlink&quot; title=&quot;2.indexOf&quot;&gt;&lt;/a&gt;&lt;span id=&quot;indexOf&quot;&gt;2.indexOf&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;和string.indexOf(searchString, position)中的indexOf方法类似。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.indexOf(searchElement[, fromIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回第一个匹配到的元素整数索引，没有匹配到就返回-1（注意使用的时严格匹配模式）。fromIndex可选，表示从这个位置开始匹配，默认值是0。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;].indexOf(&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//注意使用的时严格匹配模式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//-1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;].indexOf(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;兼容处理如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.indexOf) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.indexOf = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;searchElement, fromIndex&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&quot;this&quot; is null or not defined&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; len = o.length &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (len === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n = +fromIndex || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(n) === &lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt;= len) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    k = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(n &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? n : len - &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(n), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (k &amp;lt; len) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; o &amp;amp;&amp;amp; o[k] === searchElement) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      k++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-lastIndexOf&quot;&gt;&lt;a href=&quot;#3-lastIndexOf&quot; class=&quot;headerlink&quot; title=&quot;3.lastIndexOf&quot;&gt;&lt;/a&gt;&lt;span id=&quot;lastIndexOf&quot;&gt;3.lastIndexOf&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.lastIndexOf(searchElement[, fromIndex])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lastIndexOf和indexOf方法类似，只是lastIndexOf是从数组的末尾开始查询，fromIndex的默认值是array.length - 1.&lt;/p&gt;
&lt;h4 id=&quot;4-every&quot;&gt;&lt;a href=&quot;#4-every&quot; class=&quot;headerlink&quot; title=&quot;4.every&quot;&gt;&lt;/a&gt;&lt;span id=&quot;every&quot;&gt;4.every&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.every(callback,[ thisObject]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;every和some 都是用来测试数组中的项是否满足某一条件。every只有当所有项全部满足时才返回true，some只要有一个满足就返回true。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;130&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;].every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; element &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;兼容写法如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.every != &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.every = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;fn, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; passed = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fn === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, length = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; k &amp;lt; length; k++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (passed === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          passed = !!fn.call(context, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[k], k, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; passed;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-some&quot;&gt;&lt;a href=&quot;#5-some&quot; class=&quot;headerlink&quot; title=&quot;5.some&quot;&gt;&lt;/a&gt;&lt;span id=&quot;some&quot;&gt;5.some&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.some(callback,[ thisObject]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;some是判断数组有没有符合条件的元素，只要有一项满足就返回true，和every正好相反。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;130&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;].some(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; element &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;6-forEach&quot;&gt;&lt;a href=&quot;#6-forEach&quot; class=&quot;headerlink&quot; title=&quot;6.forEach&quot;&gt;&lt;/a&gt;&lt;span id=&quot;forEach&quot;&gt;6.forEach&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.forEach(callback[, thisArg])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;forEach是循环遍历数组中的每一个元素，等同于for循环。&lt;br&gt;forEach的callback支持3个参数：&lt;br&gt;currentValue：遍历到得当前元素&lt;br&gt;index：对应的数组索引&lt;br&gt;array：数组本身&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1, 0, [1, 2, 3]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2, 1, [1, 2, 3]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3, 2, [1, 2, 3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;forEach不会去遍历数组中空的元素。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; array[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 移除 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(array); &lt;span class=&quot;comment&quot;&gt;// &quot;1,,3&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(array.length); &lt;span class=&quot;comment&quot;&gt;// but the length is still 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array.forEach(alert); &lt;span class=&quot;comment&quot;&gt;// 弹出的仅仅是1和3&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;兼容老版浏览器的写法如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.forEach != &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.forEach = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;fn, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, length = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; k &amp;lt; length; k++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fn === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, k)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fn.call(context, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[k], k, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;7-map&quot;&gt;&lt;a href=&quot;#7-map&quot; class=&quot;headerlink&quot; title=&quot;7.map&quot;&gt;&lt;/a&gt;&lt;span id=&quot;map&quot;&gt;7.map&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.map(callback[, thisArg])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;map是指通过callback方法把原数组“映射”成对应的新数组，用法和forEach类似。&lt;br&gt;callback同样支持三个参数：&lt;br&gt;currentValue：遍历到得当前元素&lt;br&gt;index：对应的数组索引&lt;br&gt;array：数组本身&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[2, 4, 6, 8]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr3 = arr1.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;&amp;#123;item*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[undefined, undefined, undefined, undefined]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;callback中如果return，就会返回undefined。&lt;br&gt;兼容老版浏览器的写法如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.map != &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.map = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;fn, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fn === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, length = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; k &amp;lt; length; k++) &amp;#123;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         arr.push(fn.call(context, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[k], k, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;8-filter&quot;&gt;&lt;a href=&quot;#8-filter&quot; class=&quot;headerlink&quot; title=&quot;8.filter&quot;&gt;&lt;/a&gt;&lt;span id=&quot;filter&quot;&gt;8.filter&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.filter(callback[, thisArg])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;filter为“过滤”、“筛选”之意。指数组filter后，返回过滤后的新数组。&lt;br&gt;filter的callback函数需要返回布尔值true或false. 如果为true则表示通过添加到新数组中，如果是false这不通过。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrayFilter = data.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arrayFilter); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [1, 2, 3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回值只要是弱等于== true/false就可以了，而非非得返回 === true/false&lt;br&gt;兼容老版浏览器的写法如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.filter) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.filter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fun&lt;span class=&quot;comment&quot;&gt;/*, thisArg*/&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &#39;use strict&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; len = t.length &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fun !== &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; thisArg = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length &amp;gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ? &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] : &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; t) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; val = t[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fun.call(thisArg, val, i, t)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          res.push(val);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;9-reduce&quot;&gt;&lt;a href=&quot;#9-reduce&quot; class=&quot;headerlink&quot; title=&quot;9.reduce&quot;&gt;&lt;/a&gt;&lt;span id=&quot;reduce&quot;&gt;9.reduce&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.reduce(callback[, initialValue])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;reduce中callback函数接受4个参数：之前值、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。若指定，则当作最初使用的previous值；如果缺省，则使用数组的第一个元素作为previous初始值，同时current往后排一位，相比有initialValue值少一次迭代。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;].reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;previous, current, index, array&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; previous + current;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum); &lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有了reduce，我们可以轻松实现二维数组的扁平化：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; matrix = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 二维数组扁平化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; flatten = matrix.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;previous, current&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; previous.concat(current);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flatten); &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;10-reduceRight&quot;&gt;&lt;a href=&quot;#10-reduceRight&quot; class=&quot;headerlink&quot; title=&quot;10.reduceRight&quot;&gt;&lt;/a&gt;&lt;span id=&quot;reduceRight&quot;&gt;10.reduceRight&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;reduceRight跟reduce相比，用法类似：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.reduceRight(callback[, initialValue])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实现上差异在于reduceRight是从数组的末尾开始实现。看下面这个例子：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; specialDiff = data.reduceRight(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;previous, current, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; previous + current;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; previous - current;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(specialDiff); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;ES5中新增了许多Array的方法，巧用这些方法能够很好的提示代码质量和性能，自己之前也经常忘记这些方法的用法，所以写一写巩
    
    </summary>
    
      <category term="javascript" scheme="http://zhangyi5628.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://zhangyi5628.github.io/tags/javascript/"/>
    
      <category term="数组" scheme="http://zhangyi5628.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最近面试遇到的一些js笔试题</title>
    <link href="http://zhangyi5628.github.io/2016/04/06/%E6%9C%80%E8%BF%91%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9Bjs%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://zhangyi5628.github.io/2016/04/06/最近面试遇到的一些js笔试题/</id>
    <published>2016-04-06T10:28:10.000Z</published>
    <updated>2016-04-08T07:41:48.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;1、随机给出一个字符串，例如：adadfdfseffserfefsefsee，找出出现次数最多的字母。&quot;&gt;&lt;a href=&quot;#1、随机给出一个字符串，例如：adadfdfseffserfefsefsee，找出出现次数最多的字母。&quot; class=&quot;headerlink&quot; title=&quot;1、随机给出一个字符串，例如：adadfdfseffserfefsefsee，找出出现次数最多的字母。&quot;&gt;&lt;/a&gt;1、随机给出一个字符串，例如：adadfdfseffserfefsefsee，找出出现次数最多的字母。&lt;/h4&gt;&lt;p&gt;这道题有两种做法，&lt;br&gt;第一种方法是创建一个object，循环字符以字符为object的key，初始的value为1，循环的过程中，遇到同样的字符，就+1，最后得到的时类似于这样的对象：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在对这个对象的每个key和value做排序。当然这种方法不好，要做几遍循环，比较消耗性能。  &lt;/p&gt;
&lt;p&gt;第二种方法是循环字符，把字符串中相同的字母都替换为空，再用本次循环中最初的字符串长度减去替换后的字符串长度，就得到了本次循环的字符在字符串中的总数，而且每次循环都会吧相同的字符替换为空，循环需要的次数越来越少，能提高性能。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str =&lt;span class=&quot;string&quot;&gt;&quot;adadfdfseffserfefsefseeffffftsdg&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//命名一个变量放置给出的字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maxLength = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//命名一个变量放置字母出现的最高次数并初始化为0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//命名一个变量放置结果输入  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( str != &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; )&amp;#123; &lt;span class=&quot;comment&quot;&gt;//循环迭代开始，并判断字符串是否为空&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    oldStr = str; &lt;span class=&quot;comment&quot;&gt;//将原始的字符串变量赋值给新变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getStr = str.substr(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//用字符串的substr的方法得到第一个字符（首字母）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    str = str.replace(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(getStr, &lt;span class=&quot;string&quot;&gt;&quot;g&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( oldStr.length-str.length &amp;gt; maxLength ) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//判断原始的字符串的长度减去替代后字符串长度是否大于之前出现的最大的字符串长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxLength = oldStr.length-str.length; &lt;span class=&quot;comment&quot;&gt;//两字符串长度相减得到最大的字符串长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result = getStr + &lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt; + maxLength &lt;span class=&quot;comment&quot;&gt;//返回最大的字符串结果（字母、出现次数）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(result) &lt;span class=&quot;comment&quot;&gt;//弹出结果&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、写出以下代码的输出结果：&quot;&gt;&lt;a href=&quot;#2、写出以下代码的输出结果：&quot; class=&quot;headerlink&quot; title=&quot;2、写出以下代码的输出结果：&quot;&gt;&lt;/a&gt;2、写出以下代码的输出结果：&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;setTimeout是异步的，所以setTimeout会在循环过后执行，此时i为5，所以会输出5遍5。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、随机给出一个字符串，例如：adadfdfseffserfefsefsee，找出出现次数最多的字母。&quot;&gt;&lt;a href=&quot;#1、随机给出一个字符串，例如：adadfdfseffserfefsefsee，找出出现次数最多的字母。&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="javascript" scheme="http://zhangyi5628.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://zhangyi5628.github.io/tags/javascript/"/>
    
      <category term="笔试题" scheme="http://zhangyi5628.github.io/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X Yosemite 10.10下配置 Apache</title>
    <link href="http://zhangyi5628.github.io/2016/04/03/Mac-OS-X-Yosemite-10-10%E4%B8%8B%E9%85%8D%E7%BD%AE-Apache/"/>
    <id>http://zhangyi5628.github.io/2016/04/03/Mac-OS-X-Yosemite-10-10下配置-Apache/</id>
    <published>2016-04-03T10:26:18.000Z</published>
    <updated>2016-04-07T00:10:55.000Z</updated>
    
    <content type="html">&lt;p&gt;花了两个晚上休息时间才把Apache给配置好。虽然Mac系统已经集成了Apache+PHP环境，但是不同的系统版本配置还不一样。之前网上找到的配置教程大多是针对老版本的Mac OS X系统。花了很多时间按照网上搜索到的多个资料进行配置却一直不成功，这对我们不是这种前端开发人员来说也是挺头疼的，自己毕竟也是第一次配置Apache。&lt;/p&gt;
&lt;h3 id=&quot;一、启动Apache&quot;&gt;&lt;a href=&quot;#一、启动Apache&quot; class=&quot;headerlink&quot; title=&quot;一、启动Apache&quot;&gt;&lt;/a&gt;一、启动Apache&lt;/h3&gt;&lt;p&gt;在终端中输入命令，启动Apache&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apachectl start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关闭Apache&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apachectl stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重启 Apache&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apachectl restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动Apache之后，在浏览器中输入&lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/&lt;/a&gt;  ，看到“It works!”就代表运行正常。&lt;/p&gt;
&lt;h3 id=&quot;二、开启支持用户级目录http-localhost-username&quot;&gt;&lt;a href=&quot;#二、开启支持用户级目录http-localhost-username&quot; class=&quot;headerlink&quot; title=&quot;二、开启支持用户级目录http://localhost/~username/&quot;&gt;&lt;/a&gt;二、开启支持用户级目录&lt;a href=&quot;http://localhost/~username/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/~username/&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;注：以下以 username为用户名，需要安实际情况修改。&lt;/p&gt;
&lt;p&gt;OS X中默认有两个目录可以直接运行你的web应用，一个是系统级的Web根目录，一个是用户级的根目录。&lt;/p&gt;
&lt;p&gt;系统级根目录地址：/Library/WebServer/Documents/&lt;br&gt;地址：&lt;a href=&quot;http://localhost&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户级根目录和对应的网址：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/Users/username/Sites&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://localhost/~username/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;1、～-Sites-也就是自己用户目录下的站点，需要自己手动建立。&quot;&gt;&lt;a href=&quot;#1、～-Sites-也就是自己用户目录下的站点，需要自己手动建立。&quot; class=&quot;headerlink&quot; title=&quot;1、～/Sites 也就是自己用户目录下的站点，需要自己手动建立。&quot;&gt;&lt;/a&gt;1、～/Sites 也就是自己用户目录下的站点，需要自己手动建立。&lt;/h4&gt;&lt;p&gt;在终端输入命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo mkdir ~/Sites&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、在-etc-apache2-users目录下创建一个取名为“username-conf”的文件。&quot;&gt;&lt;a href=&quot;#2、在-etc-apache2-users目录下创建一个取名为“username-conf”的文件。&quot; class=&quot;headerlink&quot; title=&quot;2、在/etc/apache2/users目录下创建一个取名为“username.conf”的文件。&quot;&gt;&lt;/a&gt;2、在/etc/apache2/users目录下创建一个取名为“username.conf”的文件。&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo vi /etc/apache2/users/username.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3、创建之后将下面的这几行内容写到上面的-conf-文件中：&quot;&gt;&lt;a href=&quot;#3、创建之后将下面的这几行内容写到上面的-conf-文件中：&quot; class=&quot;headerlink&quot; title=&quot;3、创建之后将下面的这几行内容写到上面的 conf 文件中：&quot;&gt;&lt;/a&gt;3、创建之后将下面的这几行内容写到上面的 conf 文件中：&lt;/h4&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Directory&lt;/span&gt; &quot;/&lt;span class=&quot;attr&quot;&gt;Users&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;Sites&lt;/span&gt;/&quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Options Indexes MultiViews&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    AllowOverride All&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Order allow,deny &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Allow from all&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Directory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4、文件保存之后，给它赋予相应的权限：&quot;&gt;&lt;a href=&quot;#4、文件保存之后，给它赋予相应的权限：&quot; class=&quot;headerlink&quot; title=&quot;4、文件保存之后，给它赋予相应的权限：&quot;&gt;&lt;/a&gt;4、文件保存之后，给它赋予相应的权限：&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo chmod 755 /etc/apache2/users/username.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后再重启Apache，网上很多写到这里就说可以访问&lt;a href=&quot;http://localhost/～username/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/～username/&lt;/a&gt;   ，但是我一访问就显示：&lt;br&gt;Not Found&lt;br&gt;The requested URL /~username/ was not found on this server.&lt;br&gt;于是自己很纳闷为什么会这样。后来Google到了一个国外的网站说的和我的情况一样，研究了下，终于弄好。&lt;/p&gt;
&lt;h4 id=&quot;5、接下来要去掉一些httpd-conf中的注释。&quot;&gt;&lt;a href=&quot;#5、接下来要去掉一些httpd-conf中的注释。&quot; class=&quot;headerlink&quot; title=&quot;5、接下来要去掉一些httpd.conf中的注释。&quot;&gt;&lt;/a&gt;5、接下来要去掉一些httpd.conf中的注释。&lt;/h4&gt;&lt;p&gt;运行命令进入httpd.conf:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo vi /etc/apache2/httpd.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;去掉如下注释：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LoadModule userdir_module libexec/apache2/mod_userdir.so&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Include /private/etc/apache2/extra/httpd-userdir.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改如下路径:&lt;br&gt;将引号中的目录修改为自己的目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DocumentRoot &amp;quot;/Library/WebServer/Documents&amp;quot;......&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将引号中的目录修改为和上面一样的目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Directory &amp;quot;/Library/WebServer/Documents&amp;quot;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;6、运行：&quot;&gt;&lt;a href=&quot;#6、运行：&quot; class=&quot;headerlink&quot; title=&quot;6、运行：&quot;&gt;&lt;/a&gt;6、运行：&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo vi /etc/apache2/extra/httpd-userdir.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开启&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Include /private/etc/apache2/users/*.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;7、重启Apache&quot;&gt;&lt;a href=&quot;#7、重启Apache&quot; class=&quot;headerlink&quot; title=&quot;7、重启Apache&quot;&gt;&lt;/a&gt;7、重启Apache&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apachectl restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再试一次：&lt;br&gt;&lt;a href=&quot;http://localhost/～username/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/～username/&lt;/a&gt;&lt;br&gt;OK了！&lt;/p&gt;
&lt;h3 id=&quot;三、设置开机启动&quot;&gt;&lt;a href=&quot;#三、设置开机启动&quot; class=&quot;headerlink&quot; title=&quot;三、设置开机启动&quot;&gt;&lt;/a&gt;三、设置开机启动&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不知道是不是因为安装了别的什么软件导致的.一般的开机启动项可以在System Preferences–Users&amp;amp;Groups–Login Items中添加或删除.可是在这里也没有发现Apache相关的启动项.于是谷歌到了下面一个可行的方法,打开终端,执行下面的命令.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果哪天你想让它开机启动了,则将unload 改为 load:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;launchd是Mac OS下，用于初始化系统环境的关键进程。类似Linux下的init, rc.此方法同样也适用于禁用系统的一些服务,比如打印机,蓝牙等.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;花了两个晚上休息时间才把Apache给配置好。虽然Mac系统已经集成了Apache+PHP环境，但是不同的系统版本配置还不一样。之前网上找到的配置教程大多是针对老版本的Mac OS X系统。花了很多时间按照网上搜索到的多个资料进行配置却一直不成功，这对我们不是这种前端开发人
    
    </summary>
    
      <category term="Mac" scheme="http://zhangyi5628.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://zhangyi5628.github.io/tags/Mac/"/>
    
      <category term="Apache" scheme="http://zhangyi5628.github.io/tags/Apache/"/>
    
  </entry>
  
</feed>
